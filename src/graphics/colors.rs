/// 8-bit default VGA color palette
/// Pictured [here](https://en.wikipedia.org/wiki/Mode_13h)
pub static COLORS: [(u8, u8, u8); 256] = [
    (0x00, 0x00, 0x00), (0x00, 0x00, 0xa8), (0x00, 0xa8, 0x00), (0x00, 0xa8, 0xa8), (0xa8, 0x00, 0x00), (0xa8, 0x00, 0xa8), (0xa8, 0x54, 0x00), (0xa8, 0xa8, 0xa8), (0x54, 0x54, 0x54), (0x54, 0x54, 0xfc), (0x54, 0xfc, 0x54), (0x54, 0xfc, 0xfc), (0xfc, 0x54, 0x54), (0xfc, 0x54, 0xfc), (0xfc, 0xfc, 0x54), (0xfc, 0xfc, 0xfc), 
    (0x00, 0x00, 0x00), (0x14, 0x14, 0x14), (0x20, 0x20, 0x20), (0x2c, 0x2c, 0x2c), (0x38, 0x38, 0x38), (0x44, 0x44, 0x44), (0x50, 0x50, 0x50), (0x60, 0x60, 0x60), (0x70, 0x70, 0x70), (0x80, 0x80, 0x80), (0x90, 0x90, 0x90), (0xa0, 0xa0, 0xa0), (0xb4, 0xb4, 0xb4), (0xc8, 0xc8, 0xc8), (0xe0, 0xe0, 0xe0), (0xfc, 0xfc, 0xfc), 
    (0x00, 0x00, 0xfc), (0x40, 0x00, 0xfc), (0x7c, 0x00, 0xfc), (0xbc, 0x00, 0xfc), (0xfc, 0x00, 0xfc), (0xfc, 0x00, 0xbc), (0xfc, 0x00, 0x7c), (0xfc, 0x00, 0x40), (0xfc, 0x00, 0x00), (0xfc, 0x40, 0x00), (0xfc, 0x7c, 0x00), (0xfc, 0xbc, 0x00), (0xfc, 0xfc, 0x00), (0xbc, 0xfc, 0x00), (0x7c, 0xfc, 0x00), (0x40, 0xfc, 0x00), 
    (0x00, 0xfc, 0x00), (0x00, 0xfc, 0x40), (0x00, 0xfc, 0x7c), (0x00, 0xfc, 0xbc), (0x00, 0xfc, 0xfc), (0x00, 0xbc, 0xfc), (0x00, 0x7c, 0xfc), (0x00, 0x40, 0xfc), (0x7c, 0x7c, 0xfc), (0x9c, 0x7c, 0xfc), (0xbc, 0x7c, 0xfc), (0xdc, 0x7c, 0xfc), (0xfc, 0x7c, 0xfc), (0xfc, 0x7c, 0xdc), (0xfc, 0x7c, 0xbc), (0xfc, 0x7c, 0x9c), 
    (0xfc, 0x7c, 0x7c), (0xfc, 0x9c, 0x7c), (0xfc, 0xbc, 0x7c), (0xfc, 0xdc, 0x7c), (0xfc, 0xfc, 0x7c), (0xdc, 0xfc, 0x7c), (0xbc, 0xfc, 0x7c), (0x9c, 0xfc, 0x7c), (0x7c, 0xfc, 0x7c), (0x7c, 0xfc, 0x9c), (0x7c, 0xfc, 0xbc), (0x7c, 0xfc, 0xdc), (0x7c, 0xfc, 0xfc), (0x7c, 0xdc, 0xfc), (0x7c, 0xbc, 0xfc), (0x7c, 0x9c, 0xfc), 
    (0xb4, 0xb4, 0xfc), (0xc4, 0xb4, 0xfc), (0xd8, 0xb4, 0xfc), (0xe8, 0xb4, 0xfc), (0xfc, 0xb4, 0xfc), (0xfc, 0xb4, 0xe8), (0xfc, 0xb4, 0xd8), (0xfc, 0xb4, 0xc4), (0xfc, 0xb4, 0xb4), (0xfc, 0xc4, 0xb4), (0xfc, 0xd8, 0xb4), (0xfc, 0xe8, 0xb4), (0xfc, 0xfc, 0xb4), (0xe8, 0xfc, 0xb4), (0xd8, 0xfc, 0xb4), (0xc4, 0xfc, 0xb4), 
    (0xb4, 0xfc, 0xb4), (0xb4, 0xfc, 0xc4), (0xb4, 0xfc, 0xd8), (0xb4, 0xfc, 0xe8), (0xb4, 0xfc, 0xfc), (0xb4, 0xe8, 0xfc), (0xb4, 0xd8, 0xfc), (0xb4, 0xc4, 0xfc), (0x00, 0x00, 0x70), (0x1c, 0x00, 0x70), (0x38, 0x00, 0x70), (0x54, 0x00, 0x70), (0x70, 0x00, 0x70), (0x70, 0x00, 0x54), (0x70, 0x00, 0x38), (0x70, 0x00, 0x1c), 
    (0x70, 0x00, 0x00), (0x70, 0x1c, 0x00), (0x70, 0x38, 0x00), (0x70, 0x54, 0x00), (0x70, 0x70, 0x00), (0x54, 0x70, 0x00), (0x38, 0x70, 0x00), (0x1c, 0x70, 0x00), (0x00, 0x70, 0x00), (0x00, 0x70, 0x1c), (0x00, 0x70, 0x38), (0x00, 0x70, 0x54), (0x00, 0x70, 0x70), (0x00, 0x54, 0x70), (0x00, 0x38, 0x70), (0x00, 0x1c, 0x70), 
    (0x38, 0x38, 0x70), (0x44, 0x38, 0x70), (0x54, 0x38, 0x70), (0x60, 0x38, 0x70), (0x70, 0x38, 0x70), (0x70, 0x38, 0x60), (0x70, 0x38, 0x54), (0x70, 0x38, 0x44), (0x70, 0x38, 0x38), (0x70, 0x44, 0x38), (0x70, 0x54, 0x38), (0x70, 0x60, 0x38), (0x70, 0x70, 0x38), (0x60, 0x70, 0x38), (0x54, 0x70, 0x38), (0x44, 0x70, 0x38), 
    (0x38, 0x70, 0x38), (0x38, 0x70, 0x44), (0x38, 0x70, 0x54), (0x38, 0x70, 0x60), (0x38, 0x70, 0x70), (0x38, 0x60, 0x70), (0x38, 0x54, 0x70), (0x38, 0x44, 0x70), (0x50, 0x50, 0x70), (0x58, 0x50, 0x70), (0x60, 0x50, 0x70), (0x68, 0x50, 0x70), (0x70, 0x50, 0x70), (0x70, 0x50, 0x68), (0x70, 0x50, 0x60), (0x70, 0x50, 0x58), 
    (0x70, 0x50, 0x50), (0x70, 0x58, 0x50), (0x70, 0x60, 0x50), (0x70, 0x68, 0x50), (0x70, 0x70, 0x50), (0x68, 0x70, 0x50), (0x60, 0x70, 0x50), (0x58, 0x70, 0x50), (0x50, 0x70, 0x50), (0x50, 0x70, 0x58), (0x50, 0x70, 0x60), (0x50, 0x70, 0x68), (0x50, 0x70, 0x70), (0x50, 0x68, 0x70), (0x50, 0x60, 0x70), (0x50, 0x58, 0x70), 
    (0x00, 0x00, 0x40), (0x10, 0x00, 0x40), (0x20, 0x00, 0x40), (0x30, 0x00, 0x40), (0x40, 0x00, 0x40), (0x40, 0x00, 0x30), (0x40, 0x00, 0x20), (0x40, 0x00, 0x10), (0x40, 0x00, 0x00), (0x40, 0x10, 0x00), (0x40, 0x20, 0x00), (0x40, 0x30, 0x00), (0x40, 0x40, 0x00), (0x30, 0x40, 0x00), (0x20, 0x40, 0x00), (0x10, 0x40, 0x00), 
    (0x00, 0x40, 0x00), (0x00, 0x40, 0x10), (0x00, 0x40, 0x20), (0x00, 0x40, 0x30), (0x00, 0x40, 0x40), (0x00, 0x30, 0x40), (0x00, 0x20, 0x40), (0x00, 0x10, 0x40), (0x20, 0x20, 0x40), (0x28, 0x20, 0x40), (0x30, 0x20, 0x40), (0x38, 0x20, 0x40), (0x40, 0x20, 0x40), (0x40, 0x20, 0x38), (0x40, 0x20, 0x30), (0x40, 0x20, 0x28), 
    (0x40, 0x20, 0x20), (0x40, 0x28, 0x20), (0x40, 0x30, 0x20), (0x40, 0x38, 0x20), (0x40, 0x40, 0x20), (0x38, 0x40, 0x20), (0x30, 0x40, 0x20), (0x28, 0x40, 0x20), (0x20, 0x40, 0x20), (0x20, 0x40, 0x28), (0x20, 0x40, 0x30), (0x20, 0x40, 0x38), (0x20, 0x40, 0x40), (0x20, 0x38, 0x40), (0x20, 0x30, 0x40), (0x20, 0x28, 0x40), 
    (0x2c, 0x2c, 0x40), (0x30, 0x2c, 0x40), (0x34, 0x2c, 0x40), (0x3c, 0x2c, 0x40), (0x40, 0x2c, 0x40), (0x40, 0x2c, 0x3c), (0x40, 0x2c, 0x34), (0x40, 0x2c, 0x30), (0x40, 0x2c, 0x2c), (0x40, 0x30, 0x2c), (0x40, 0x34, 0x2c), (0x40, 0x3c, 0x2c), (0x40, 0x40, 0x2c), (0x3c, 0x40, 0x2c), (0x34, 0x40, 0x2c), (0x30, 0x40, 0x2c), 
    (0x2c, 0x40, 0x2c), (0x2c, 0x40, 0x30), (0x2c, 0x40, 0x34), (0x2c, 0x40, 0x3c), (0x2c, 0x40, 0x40), (0x2c, 0x3c, 0x40), (0x2c, 0x34, 0x40), (0x2c, 0x30, 0x40), (0x00, 0x00, 0x00), (0x00, 0x00, 0x00), (0x00, 0x00, 0x00), (0x00, 0x00, 0x00), (0x00, 0x00, 0x00), (0x00, 0x00, 0x00), (0x00, 0x00, 0x00), (0x00, 0x00, 0x00), 
];

pub fn rgb(r: u8, g: u8, b: u8) -> u8 {
    let mut min = 0;
    let mut min_index = 0;

    for (i, color) in COLORS.iter().enumerate() {
        let dif_r = difference(color.0, r) as u32;
        let dif_g = difference(color.1, g) as u32;
        let dif_b = difference(color.2, b) as u32;
        let squared_dist = dif_r*dif_r + dif_g*dif_g + dif_b*dif_b;
        if i == 0 || squared_dist < min {
            min = squared_dist;
            min_index = i as u8;
        }
    }

    min_index
}

fn difference(a: u8, b: u8) -> u8 {
    if a > b {
        a-b
    } else {
        b-a
    }
}